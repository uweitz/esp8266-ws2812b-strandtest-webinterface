#include <ESP8266WiFi.h>
#include <ESP8266WiFiMulti.h>
#include <WiFiClient.h>
#include <WiFiClientSecure.h>
#include <WiFiServer.h>
#include <WiFiUdp.h>

#include <Adafruit_NeoPixel.h>
#ifdef __AVR__
  #include <avr/power.h>
#endif

#define PIN D4

// Parameter 1 = number of pixels in strip
// Parameter 2 = Arduino pin number (most are valid)
// Parameter 3 = pixel type flags, add together as needed:
//   NEO_KHZ800  800 KHz bitstream (most NeoPixel products w/WS2812 LEDs)
//   NEO_KHZ400  400 KHz (classic 'v1' (not v2) FLORA pixels, WS2811 drivers)
//   NEO_GRB     Pixels are wired for GRB bitstream (most NeoPixel products)
//   NEO_RGB     Pixels are wired for RGB bitstream (v1 FLORA pixels, not v2)
//   NEO_RGBW    Pixels are wired for RGBW bitstream (NeoPixel RGBW products)
Adafruit_NeoPixel strip = Adafruit_NeoPixel(150, PIN, NEO_GRB + NEO_KHZ800);

// IMPORTANT: To reduce NeoPixel burnout risk, add 1000 uF capacitor across
// pixel power leads, add 300 - 500 Ohm resistor on first pixel's data input
// and minimize distance between Arduino and first pixel.  Avoid connecting
// on a live circuit...if you must, connect GND first.

  const char* ssid = "Hallo-ibims-Alice-im-WLANd";
  const char* password = "PASSWORD";

  WiFiServer server(80);

void setup() {
  // This is for Trinket 5V 16MHz, you can remove these three lines if you are not using a Trinket
  #if defined (__AVR_ATtiny85__)
    if (F_CPU == 16000000) clock_prescale_set(clock_div_1);
  #endif
  // End of trinket special code

  strip.begin();
  strip.show(); // Initialize all pixels to 'off'

  Serial.print("Connecting to ");
  Serial.println(ssid);
  WiFi.begin(ssid, password);

  while(WiFi.status() != WL_CONNECTED) {
    delay(250);
    Serial.print(".");
  }

  Serial.println("");
  Serial.println("WiFi connected");

  server.begin();
  Serial.println("Web Server Started");

  Serial.print("You can connect to the Server here: ");
  Serial.print("http://");
  Serial.print(WiFi.localIP());
  Serial.println();
  Serial.println();
  
}

void loop() {

  WiFiClient client = server.available();
  if(!client) {
    return;
  }

  String request = client.readStringUntil('\r');

  if(request.indexOf("/COLORWIPERED=1") != -1) {
    colorWipe(strip.Color(255, 0, 0), 50);
  }

  if(request.indexOf("/COLORWIPEGREEN=1") != -1) {
    colorWipe(strip.Color(0, 255, 0), 50);
  }

  if(request.indexOf("/COLORWIPEBLUE=1") != -1) {
    colorWipe(strip.Color(0, 0, 255), 50);
  }

  if(request.indexOf("/COLORWIPEWHITERGBW=1") != -1) {
    colorWipe(strip.Color(0, 0, 0, 255), 50);
  }

  if(request.indexOf("/THEATERCHASEWHITE=1") != -1) {
    theaterChase(strip.Color(127, 127, 127), 50);
  }

  if(request.indexOf("/THEATERCHASERED=1") != -1) {
    theaterChase(strip.Color(127, 0, 0), 50);
  }

  if(request.indexOf("/THEATERCHASEGREEN=1") != -1) {
    theaterChase(strip.Color(0, 127, 0), 50);
  }

  if(request.indexOf("/THEATERCHASEBLUE=1") != -1) {
    theaterChase(strip.Color(0, 0, 127), 50);
  }

  if(request.indexOf("/RAINBOW=1") != -1) {
    rainbow(20);
  }

  if(request.indexOf("/RAINBOWCYCLE=1") != -1) {
    rainbowCycle(20);
  }

  if(request.indexOf("/THEATERCHASERAINBOW=1") != -1) {
    theaterChaseRainbow(50);
  }

  client.println("HTTP/1.1 200 OK");
  client.println("Content-Type: text/html");
  client.println();
  client.println("<!DOCTYPE HTML>");

  client.println("<html>");

  client.println("<style>");
  client.println("body { background-color: #ACAEAD; }");
  client.println("</style>");

  client.println("<br><br>");
  client.println("<a href=\"/COLORWIPERED=1\"\"><button>COLORWIPERED</button></a>");
  client.println("<a href=\"/COLORWIPEGREEN=1\"\"><button>COLORWIPEGREEN</button></a>");
  client.println("<a href=\"/COLORWIPEBLUE=1\"\"><button>COLORWIPEBLUE</button></a>");
  client.println("<a href=\"/COLORWIPEWHITERGBWUE=1\"\"><button>COLORWIPEWHITERGBW</button></a>");
  client.println("<a href=\"/THEATERCHASEWHITE=1\"\"><button>THEATERCHASEWHITE</button></a>");
  client.println("<a href=\"/THEATERCHASERED=1\"\"><button>THEATERCHASERED</button></a>");
  client.println("<a href=\"/THEATERCHASEGREEN=1\"\"><button>THEATERCHASEGREEN</button></a>");
  client.println("<a href=\"/THEATERCHASEBLUE=1\"\"><button>THEATERCHASEBLUE</button></a>");
  client.println("<a href=\"/RAINBOW=1\"\"><button>RAINBOW</button></a>");
  client.println("<a href=\"/RAINBOWCYCLE=1\"\"><button>RAINBOWCYCLE</button></a>");
  client.println("<a href=\"/THEATERCHASERAINBOW=1\"\"><button>THEATERCHASERAINBOW</button></a>");

  client.println("</html>");
  delay(10);
  
  // Some example procedures showing how to display to the pixels:
  //colorWipe(strip.Color(255, 0, 0), 50); // Red
  //colorWipe(strip.Color(0, 255, 0), 50); // Green
  //colorWipe(strip.Color(0, 0, 255), 50); // Blue
//colorWipe(strip.Color(0, 0, 0, 255), 50); // White RGBW
  // Send a theater pixel chase in...
  //theaterChase(strip.Color(127, 127, 127), 50); // White
  //theaterChase(strip.Color(127, 0, 0), 50); // Red
  //theaterChase(strip.Color(0, 0, 127), 50); // Blue

  //rainbow(20);
  //rainbowCycle(20);
  //theaterChaseRainbow(50);
}

// Fill the dots one after the other with a color
void colorWipe(uint32_t c, uint8_t wait) {
  for(uint16_t i=0; i<strip.numPixels(); i++) {
    strip.setPixelColor(i, c);
    strip.show();
    delay(wait);
  }
}

void rainbow(uint8_t wait) {
  uint16_t i, j;

  for(j=0; j<256; j++) {
    for(i=0; i<strip.numPixels(); i++) {
      strip.setPixelColor(i, Wheel((i+j) & 255));
    }
    strip.show();
    delay(wait);
  }
}

// Slightly different, this makes the rainbow equally distributed throughout
void rainbowCycle(uint8_t wait) {
  uint16_t i, j;

  for(j=0; j<256*5; j++) { // 5 cycles of all colors on wheel
    for(i=0; i< strip.numPixels(); i++) {
      strip.setPixelColor(i, Wheel(((i * 256 / strip.numPixels()) + j) & 255));
    }
    strip.show();
    delay(wait);
  }
}

//Theatre-style crawling lights.
void theaterChase(uint32_t c, uint8_t wait) {
  for (int j=0; j<10; j++) {  //do 10 cycles of chasing
    for (int q=0; q < 3; q++) {
      for (uint16_t i=0; i < strip.numPixels(); i=i+3) {
        strip.setPixelColor(i+q, c);    //turn every third pixel on
      }
      strip.show();

      delay(wait);

      for (uint16_t i=0; i < strip.numPixels(); i=i+3) {
        strip.setPixelColor(i+q, 0);        //turn every third pixel off
      }
    }
  }
}

//Theatre-style crawling lights with rainbow effect
void theaterChaseRainbow(uint8_t wait) {
  for (int j=0; j < 256; j++) {     // cycle all 256 colors in the wheel
    for (int q=0; q < 3; q++) {
      for (uint16_t i=0; i < strip.numPixels(); i=i+3) {
        strip.setPixelColor(i+q, Wheel( (i+j) % 255));    //turn every third pixel on
      }
      strip.show();

      delay(wait);

      for (uint16_t i=0; i < strip.numPixels(); i=i+3) {
        strip.setPixelColor(i+q, 0);        //turn every third pixel off
      }
    }
  }
}

// Input a value 0 to 255 to get a color value.
// The colours are a transition r - g - b - back to r.
uint32_t Wheel(byte WheelPos) {
  WheelPos = 255 - WheelPos;
  if(WheelPos < 85) {
    return strip.Color(255 - WheelPos * 3, 0, WheelPos * 3);
  }
  if(WheelPos < 170) {
    WheelPos -= 85;
    return strip.Color(0, WheelPos * 3, 255 - WheelPos * 3);
  }
  WheelPos -= 170;
  return strip.Color(WheelPos * 3, 255 - WheelPos * 3, 0);
}
